// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reminders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RemindersClient is the client API for Reminders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemindersClient interface {
	AddReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Empty, error)
	ListReminders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReminderConfig, error)
	DeleteTask(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type remindersClient struct {
	cc grpc.ClientConnInterface
}

func NewRemindersClient(cc grpc.ClientConnInterface) RemindersClient {
	return &remindersClient{cc}
}

func (c *remindersClient) AddReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/reminders.Reminders/AddReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersClient) ListReminders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReminderConfig, error) {
	out := new(ReminderConfig)
	err := c.cc.Invoke(ctx, "/reminders.Reminders/ListReminders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersClient) DeleteTask(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/reminders.Reminders/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemindersServer is the server API for Reminders service.
// All implementations should embed UnimplementedRemindersServer
// for forward compatibility
type RemindersServer interface {
	AddReminder(context.Context, *Reminder) (*Empty, error)
	ListReminders(context.Context, *Empty) (*ReminderConfig, error)
	DeleteTask(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedRemindersServer should be embedded to have forward compatible implementations.
type UnimplementedRemindersServer struct {
}

func (UnimplementedRemindersServer) AddReminder(context.Context, *Reminder) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReminder not implemented")
}
func (UnimplementedRemindersServer) ListReminders(context.Context, *Empty) (*ReminderConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReminders not implemented")
}
func (UnimplementedRemindersServer) DeleteTask(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}

// UnsafeRemindersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemindersServer will
// result in compilation errors.
type UnsafeRemindersServer interface {
	mustEmbedUnimplementedRemindersServer()
}

func RegisterRemindersServer(s grpc.ServiceRegistrar, srv RemindersServer) {
	s.RegisterService(&_Reminders_serviceDesc, srv)
}

func _Reminders_AddReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reminder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).AddReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/AddReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).AddReminder(ctx, req.(*Reminder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminders_ListReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).ListReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/ListReminders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).ListReminders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminders_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).DeleteTask(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reminders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reminders.Reminders",
	HandlerType: (*RemindersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReminder",
			Handler:    _Reminders_AddReminder_Handler,
		},
		{
			MethodName: "ListReminders",
			Handler:    _Reminders_ListReminders_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Reminders_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminders.proto",
}

// ReminderReceiverClient is the client API for ReminderReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderReceiverClient interface {
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
}

type reminderReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderReceiverClient(cc grpc.ClientConnInterface) ReminderReceiverClient {
	return &reminderReceiverClient{cc}
}

func (c *reminderReceiverClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/reminders.ReminderReceiver/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderReceiverServer is the server API for ReminderReceiver service.
// All implementations should embed UnimplementedReminderReceiverServer
// for forward compatibility
type ReminderReceiverServer interface {
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
}

// UnimplementedReminderReceiverServer should be embedded to have forward compatible implementations.
type UnimplementedReminderReceiverServer struct {
}

func (UnimplementedReminderReceiverServer) Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

// UnsafeReminderReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderReceiverServer will
// result in compilation errors.
type UnsafeReminderReceiverServer interface {
	mustEmbedUnimplementedReminderReceiverServer()
}

func RegisterReminderReceiverServer(s grpc.ServiceRegistrar, srv ReminderReceiverServer) {
	s.RegisterService(&_ReminderReceiver_serviceDesc, srv)
}

func _ReminderReceiver_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderReceiverServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.ReminderReceiver/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderReceiverServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReminderReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reminders.ReminderReceiver",
	HandlerType: (*ReminderReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _ReminderReceiver_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminders.proto",
}
