// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reminders.proto

/*
Package reminders is a generated protocol buffer package.

It is generated from these files:
	reminders.proto

It has these top-level messages:
	ReminderConfig
	Reminder
	Empty
	ReminderList
	TaskList
*/
package reminders

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The state the task is in
type Reminder_ReminderState int32

const (
	Reminder_REPEATING  Reminder_ReminderState = 0
	Reminder_ASSIGNED   Reminder_ReminderState = 1
	Reminder_COMPLETE   Reminder_ReminderState = 2
	Reminder_UNASSIGNED Reminder_ReminderState = 3
)

var Reminder_ReminderState_name = map[int32]string{
	0: "REPEATING",
	1: "ASSIGNED",
	2: "COMPLETE",
	3: "UNASSIGNED",
}
var Reminder_ReminderState_value = map[string]int32{
	"REPEATING":  0,
	"ASSIGNED":   1,
	"COMPLETE":   2,
	"UNASSIGNED": 3,
}

func (x Reminder_ReminderState) String() string {
	return proto.EnumName(Reminder_ReminderState_name, int32(x))
}
func (Reminder_ReminderState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ReminderConfig struct {
	List  *ReminderList `protobuf:"bytes,1,opt,name=list" json:"list,omitempty"`
	Tasks []*TaskList   `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ReminderConfig) Reset()                    { *m = ReminderConfig{} }
func (m *ReminderConfig) String() string            { return proto.CompactTextString(m) }
func (*ReminderConfig) ProtoMessage()               {}
func (*ReminderConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReminderConfig) GetList() *ReminderList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ReminderConfig) GetTasks() []*TaskList {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Reminder struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Text day of the week
	DayOfWeek string `protobuf:"bytes,2,opt,name=day_of_week,json=dayOfWeek" json:"day_of_week,omitempty"`
	// The time this should next be run
	NextRunTime  int64                  `protobuf:"varint,3,opt,name=next_run_time,json=nextRunTime" json:"next_run_time,omitempty"`
	CurrentState Reminder_ReminderState `protobuf:"varint,4,opt,name=current_state,json=currentState,enum=reminders.Reminder_ReminderState" json:"current_state,omitempty"`
	// The component this should filed against in la github
	GithubComponent string `protobuf:"bytes,6,opt,name=github_component,json=githubComponent" json:"github_component,omitempty"`
	// Assigned state for a github task
	GithubId string `protobuf:"bytes,5,opt,name=github_id,json=githubId" json:"github_id,omitempty"`
}

func (m *Reminder) Reset()                    { *m = Reminder{} }
func (m *Reminder) String() string            { return proto.CompactTextString(m) }
func (*Reminder) ProtoMessage()               {}
func (*Reminder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reminder) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Reminder) GetDayOfWeek() string {
	if m != nil {
		return m.DayOfWeek
	}
	return ""
}

func (m *Reminder) GetNextRunTime() int64 {
	if m != nil {
		return m.NextRunTime
	}
	return 0
}

func (m *Reminder) GetCurrentState() Reminder_ReminderState {
	if m != nil {
		return m.CurrentState
	}
	return Reminder_REPEATING
}

func (m *Reminder) GetGithubComponent() string {
	if m != nil {
		return m.GithubComponent
	}
	return ""
}

func (m *Reminder) GetGithubId() string {
	if m != nil {
		return m.GithubId
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReminderList struct {
	Reminders []*Reminder `protobuf:"bytes,1,rep,name=reminders" json:"reminders,omitempty"`
}

func (m *ReminderList) Reset()                    { *m = ReminderList{} }
func (m *ReminderList) String() string            { return proto.CompactTextString(m) }
func (*ReminderList) ProtoMessage()               {}
func (*ReminderList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReminderList) GetReminders() []*Reminder {
	if m != nil {
		return m.Reminders
	}
	return nil
}

type TaskList struct {
	Name  string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tasks *ReminderList `protobuf:"bytes,2,opt,name=tasks" json:"tasks,omitempty"`
}

func (m *TaskList) Reset()                    { *m = TaskList{} }
func (m *TaskList) String() string            { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()               {}
func (*TaskList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskList) GetTasks() *ReminderList {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*ReminderConfig)(nil), "reminders.ReminderConfig")
	proto.RegisterType((*Reminder)(nil), "reminders.Reminder")
	proto.RegisterType((*Empty)(nil), "reminders.Empty")
	proto.RegisterType((*ReminderList)(nil), "reminders.ReminderList")
	proto.RegisterType((*TaskList)(nil), "reminders.TaskList")
	proto.RegisterEnum("reminders.Reminder_ReminderState", Reminder_ReminderState_name, Reminder_ReminderState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reminders service

type RemindersClient interface {
	AddReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Empty, error)
	ListReminders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReminderConfig, error)
	AddTaskList(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*Empty, error)
}

type remindersClient struct {
	cc *grpc.ClientConn
}

func NewRemindersClient(cc *grpc.ClientConn) RemindersClient {
	return &remindersClient{cc}
}

func (c *remindersClient) AddReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/reminders.Reminders/AddReminder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersClient) ListReminders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReminderConfig, error) {
	out := new(ReminderConfig)
	err := grpc.Invoke(ctx, "/reminders.Reminders/ListReminders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindersClient) AddTaskList(ctx context.Context, in *TaskList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/reminders.Reminders/AddTaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reminders service

type RemindersServer interface {
	AddReminder(context.Context, *Reminder) (*Empty, error)
	ListReminders(context.Context, *Empty) (*ReminderConfig, error)
	AddTaskList(context.Context, *TaskList) (*Empty, error)
}

func RegisterRemindersServer(s *grpc.Server, srv RemindersServer) {
	s.RegisterService(&_Reminders_serviceDesc, srv)
}

func _Reminders_AddReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reminder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).AddReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/AddReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).AddReminder(ctx, req.(*Reminder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminders_ListReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).ListReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/ListReminders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).ListReminders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminders_AddTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServer).AddTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reminders.Reminders/AddTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServer).AddTaskList(ctx, req.(*TaskList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reminders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reminders.Reminders",
	HandlerType: (*RemindersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReminder",
			Handler:    _Reminders_AddReminder_Handler,
		},
		{
			MethodName: "ListReminders",
			Handler:    _Reminders_ListReminders_Handler,
		},
		{
			MethodName: "AddTaskList",
			Handler:    _Reminders_AddTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminders.proto",
}

func init() { proto.RegisterFile("reminders.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6b, 0xdb, 0x30,
	0x10, 0xc7, 0xe3, 0xfc, 0xe8, 0xe2, 0x73, 0x9c, 0x9a, 0xdb, 0xc3, 0xb4, 0x0e, 0x46, 0xe6, 0xa7,
	0x94, 0xb1, 0xc2, 0x32, 0xd8, 0xe3, 0x20, 0x64, 0x5e, 0xc9, 0x68, 0xd3, 0xa2, 0x64, 0xec, 0xd1,
	0xb8, 0xb5, 0xd2, 0x0a, 0xcf, 0x72, 0xb0, 0x64, 0xd6, 0xfc, 0x6d, 0x83, 0xfd, 0x6d, 0xc3, 0xf2,
	0x8f, 0x78, 0xc4, 0xf4, 0xed, 0xee, 0xab, 0x8f, 0xee, 0x74, 0x7c, 0x4f, 0x70, 0x9a, 0xb2, 0x98,
	0x8b, 0x90, 0xa5, 0xf2, 0x62, 0x97, 0x26, 0x2a, 0x41, 0xb3, 0x16, 0xdc, 0x47, 0x18, 0xd3, 0x32,
	0x59, 0x24, 0x62, 0xcb, 0x1f, 0xf0, 0x3d, 0xf4, 0x7f, 0x71, 0xa9, 0x88, 0x31, 0x31, 0xa6, 0xd6,
	0xec, 0xd5, 0xc5, 0xe1, 0x72, 0x05, 0x5e, 0x71, 0xa9, 0xa8, 0x86, 0xf0, 0x1c, 0x06, 0x2a, 0x90,
	0x91, 0x24, 0xdd, 0x49, 0x6f, 0x6a, 0xcd, 0x5e, 0x36, 0xe8, 0x4d, 0x20, 0x23, 0x4d, 0x16, 0x84,
	0xfb, 0xb7, 0x0b, 0xc3, 0xaa, 0x02, 0x22, 0xf4, 0x15, 0x7b, 0x2a, 0x9a, 0x98, 0x54, 0xc7, 0xf8,
	0x16, 0xac, 0x30, 0xd8, 0xfb, 0xc9, 0xd6, 0xff, 0xcd, 0x58, 0x44, 0xba, 0xfa, 0xc8, 0x0c, 0x83,
	0xfd, 0xcd, 0xf6, 0x27, 0x63, 0x11, 0xba, 0x60, 0x0b, 0xf6, 0xa4, 0xfc, 0x34, 0x13, 0xbe, 0xe2,
	0x31, 0x23, 0xbd, 0x89, 0x31, 0xed, 0x51, 0x2b, 0x17, 0x69, 0x26, 0x36, 0x3c, 0x66, 0xf8, 0x0d,
	0xec, 0xfb, 0x2c, 0x4d, 0x99, 0x50, 0xbe, 0x54, 0x81, 0x62, 0xa4, 0x3f, 0x31, 0xa6, 0xe3, 0xd9,
	0xbb, 0x96, 0x29, 0xea, 0x60, 0x9d, 0x83, 0x74, 0x54, 0xde, 0xd3, 0x19, 0x9e, 0x83, 0xf3, 0xc0,
	0xd5, 0x63, 0x76, 0xe7, 0xdf, 0x27, 0xf1, 0x2e, 0x11, 0x4c, 0x28, 0x72, 0xa2, 0x1f, 0x74, 0x5a,
	0xe8, 0x8b, 0x4a, 0xc6, 0x37, 0x60, 0x96, 0x28, 0x0f, 0xc9, 0x40, 0x33, 0xc3, 0x42, 0x58, 0x86,
	0xee, 0x77, 0xb0, 0xff, 0x6b, 0x83, 0x36, 0x98, 0xd4, 0xbb, 0xf5, 0xe6, 0x9b, 0xe5, 0xea, 0xd2,
	0xe9, 0xe0, 0x08, 0x86, 0xf3, 0xf5, 0x7a, 0x79, 0xb9, 0xf2, 0xbe, 0x3a, 0x46, 0x9e, 0x2d, 0x6e,
	0xae, 0x6f, 0xaf, 0xbc, 0x8d, 0xe7, 0x74, 0x71, 0x0c, 0xf0, 0x63, 0x55, 0x9f, 0xf6, 0xdc, 0x17,
	0x30, 0xf0, 0xe2, 0x9d, 0xda, 0xbb, 0x73, 0x18, 0x35, 0xad, 0xc0, 0x8f, 0x70, 0x30, 0x94, 0x18,
	0x47, 0x46, 0x54, 0x2c, 0x6d, 0xd8, 0x7e, 0x0d, 0xc3, 0xca, 0x9f, 0xdc, 0x0b, 0x11, 0xc4, 0xac,
	0xf2, 0x22, 0x8f, 0xf1, 0xc3, 0xc1, 0xd7, 0x67, 0xb7, 0xa0, 0xa0, 0x66, 0x7f, 0x0c, 0x30, 0x2b,
	0x5d, 0xe2, 0x67, 0xb0, 0xe6, 0x61, 0x58, 0x7b, 0xdd, 0xf6, 0x96, 0x33, 0xa7, 0x21, 0x16, 0x53,
	0x75, 0xf0, 0x0b, 0xd8, 0xba, 0x68, 0x5d, 0xe8, 0x08, 0x3a, 0x7b, 0xdd, 0x52, 0xab, 0xd8, 0x5b,
	0xb7, 0x53, 0xf6, 0xad, 0xe7, 0x6a, 0x5b, 0xc6, 0xb6, 0xbe, 0x77, 0x27, 0xfa, 0x57, 0x7c, 0xfa,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x59, 0x23, 0xa1, 0xf7, 0x28, 0x03, 0x00, 0x00,
}
